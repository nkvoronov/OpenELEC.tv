diff -ru a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.c b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.c
--- a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.c	2012-04-05 04:05:54.000000000 +0300
+++ b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.c	2013-04-24 21:24:54.361413576 +0300
@@ -96,7 +96,7 @@
 		saa716x_input_ir_stop(saa716x);
 }
 
-int saa716x_input_init(struct saa716x_dev *saa716x)
+int saa716x_input_init(struct saa716x_dev *saa716x, int gpio_in, const char *map_name)
 {
 	struct saa716x_ir *ir;
 	struct rc_dev *rc;
@@ -140,8 +140,8 @@
 	rc->driver_name = MODULE_NAME;
 
 	/* hardware specific */
-	rc->map_name = RC_MAP_TBS_NEC;
-	ir->mask_keyevent  = 1 << 4;
+	rc->map_name = map_name;
+	ir->mask_keyevent  = 1 << gpio_in;
 
 	saa716x->ir = ir;
 	ret = rc_register_device(rc);
diff -ru a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.h b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.h
--- a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.h	2012-04-05 04:05:54.000000000 +0300
+++ b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_input.h	2013-04-24 21:25:18.945413293 +0300
@@ -24,7 +24,7 @@
 
 extern void saa716x_input_irq_handler(struct saa716x_dev *saa716x);
 
-extern int saa716x_input_init(struct saa716x_dev *saa716x);
+extern int saa716x_input_init(struct saa716x_dev *saa716x, int gpio_in, const char *map_name);
 extern void saa716x_input_fini(struct saa716x_dev *saa716x);
 
 #endif
diff -ru a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_priv.h b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_priv.h
--- a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_priv.h	2012-04-05 04:05:54.000000000 +0300
+++ b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_priv.h	2013-04-24 21:28:04.629411384 +0300
@@ -106,6 +106,9 @@
 
 	struct saa716x_adap_config	adap_config[4];
 	enum saa716x_i2c_rate		i2c_rate[2];
+
+	int				rc_gpio_in;
+	const char			*rc_map_name;
 };
 
 struct saa716x_adapter {
diff -ru a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.c b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.c
--- a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.c	2013-04-25 03:14:44.376734867 +0300
+++ b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.c	2013-04-25 03:12:17.424736560 +0300
@@ -35,6 +35,7 @@
 #include "saa716x_priv.h"
 
 #include "saa716x_input.h"
+#include <media/rc-core.h>
 
 #include "saa716x_tbs.h"
 #include "tbs62x0fe.h"
@@ -181,10 +182,10 @@
 		SAA716x_EPWR(MSI, MSI_CONFIG37, data);
 		SAA716x_EPWR(MSI, MSI_INT_ENA_SET_H, MSI_INT_EXTINT_4);
 
-		saa716x_gpio_set_input(saa716x, 4);
+		saa716x_gpio_set_input(saa716x, saa716x->config->rc_gpio_in);
 		msleep(1);
 	
-		saa716x_input_init(saa716x);
+		saa716x_input_init(saa716x,saa716x->config->rc_gpio_in, saa716x->config->rc_map_name);
 	}
 
 	err = saa716x_dvb_init(saa716x);
@@ -396,6 +397,75 @@
 	return ret;
 }
 
+static irqreturn_t saa716x_skystar2_pci_irq(int irq, void *dev_id)
+{
+	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
+
+	u32 stat_h, stat_l, mask_h, mask_l;
+	u32 fgpiStatus;
+	u32 activeBuffer;
+
+	if (unlikely(saa716x == NULL)) {
+		printk("%s: saa716x=NULL", __func__);
+		return IRQ_NONE;
+	}
+
+	stat_l = SAA716x_EPRD(MSI, MSI_INT_STATUS_L);
+	stat_h = SAA716x_EPRD(MSI, MSI_INT_STATUS_H);
+	mask_l = SAA716x_EPRD(MSI, MSI_INT_ENA_L);
+	mask_h = SAA716x_EPRD(MSI, MSI_INT_ENA_H);
+
+	dprintk(SAA716x_DEBUG, 1, "MSI STAT L=<%02x> H=<%02x>, CTL L=<%02x> H=<%02x>",
+		stat_l, stat_h, mask_l, mask_h);
+
+	if (!((stat_l & mask_l) || (stat_h & mask_h)))
+		return IRQ_NONE;
+
+	if (stat_l)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_L, stat_l);
+
+	if (stat_h)
+		SAA716x_EPWR(MSI, MSI_INT_STATUS_CLR_H, stat_h);
+
+	if (stat_h & MSI_INT_EXTINT_4)
+		saa716x_input_irq_handler(saa716x);
+
+	if (stat_l) {
+		if (stat_l & MSI_INT_TAGACK_FGPI_1) {
+
+			fgpiStatus = SAA716x_EPRD(FGPI1, INT_STATUS);
+			activeBuffer = (SAA716x_EPRD(BAM, BAM_FGPI1_DMA_BUF_MODE) >> 3) & 0x7;
+			dprintk(SAA716x_DEBUG, 1, "fgpiStatus = %04X, buffer = %d",
+				fgpiStatus, activeBuffer);
+			if (activeBuffer > 0)
+				activeBuffer -= 1;
+			else
+				activeBuffer = 7;
+			if (saa716x->fgpi[1].dma_buf[activeBuffer].mem_virt) {
+				u8 * data = (u8 *)saa716x->fgpi[1].dma_buf[activeBuffer].mem_virt;
+				dprintk(SAA716x_DEBUG, 1, "%02X%02X%02X%02X",
+					data[0], data[1], data[2], data[3]);
+				dvb_dmx_swfilter_packets(&saa716x->saa716x_adap[0].demux, data, 348);
+			}
+			if (fgpiStatus) {
+				SAA716x_EPWR(FGPI1, INT_CLR_STATUS, fgpiStatus);
+			}
+		}
+	}
+
+	saa716x_msi_event(saa716x, stat_l, stat_h);
+
+	return IRQ_HANDLED;
+}
+
+static int load_config_skystar2(struct saa716x_dev *saa716x)
+{
+	int ret = 0;
+
+	return ret;
+}
+
+
 static irqreturn_t saa716x_tbs6925_pci_irq(int irq, void *dev_id)
 {
 	struct saa716x_dev *saa716x	= (struct saa716x_dev *) dev_id;
@@ -1658,7 +1728,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6280 "TurboSight TBS 6280"
@@ -1752,7 +1824,198 @@
 			/* adapter 1 */
 			.ts_port = 3
 		},
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
+};
+
+#define SAA716x_MODEL_SKYSTAR2_EXPRESS_HD	"SkyStar 2 eXpress HD"
+#define SAA716x_DEV_SKYSTAR2_EXPRESS_HD		"DVB-S/S2"
+
+static struct stv090x_config skystar2_stv090x_config = {
+	.device			= STV0903,
+	.demod_mode		= STV090x_SINGLE,
+	.clk_mode		= STV090x_CLK_EXT,
+
+	.xtal			= 8000000,
+	.address		= 0x68,
+
+	.ts1_mode		= STV090x_TSMODE_DVBCI,
+	.ts2_mode		= STV090x_TSMODE_SERIAL_CONTINUOUS,
+
+	.repeater_level		= STV090x_RPTLEVEL_16,
+
+	.tuner_init		= NULL,
+	.tuner_sleep		= NULL,
+	.tuner_set_mode		= NULL,
+	.tuner_set_frequency	= NULL,
+	.tuner_get_frequency	= NULL,
+	.tuner_set_bandwidth	= NULL,
+	.tuner_get_bandwidth	= NULL,
+	.tuner_set_bbgain	= NULL,
+	.tuner_get_bbgain	= NULL,
+	.tuner_set_refclk	= NULL,
+	.tuner_get_status	= NULL,
+};
+
+static int skystar2_set_voltage(struct dvb_frontend *fe,
+				enum fe_sec_voltage voltage)
+{
+	int err;
+	u8 en = 0;
+	u8 sel = 0;
+
+	switch (voltage) {
+	case SEC_VOLTAGE_OFF:
+		en = 0;
+		break;
+
+	case SEC_VOLTAGE_13:
+		en = 1;
+		sel = 0;
+		break;
+
+	case SEC_VOLTAGE_18:
+		en = 1;
+		sel = 1;
+		break;
+
+	default:
+		break;
 	}
+
+	err = stv090x_set_gpio(fe, 2, 0, en, 0);
+	if (err < 0)
+		goto exit;
+	err = stv090x_set_gpio(fe, 3, 0, sel, 0);
+	if (err < 0)
+		goto exit;
+
+	return 0;
+exit:
+	return err;
+}
+
+static int skystar2_voltage_boost(struct dvb_frontend *fe, long arg)
+{
+	int err;
+	u8 value;
+
+	if (arg)
+		value = 1;
+	else
+		value = 0;
+
+	err = stv090x_set_gpio(fe, 4, 0, value, 0);
+	if (err < 0)
+		goto exit;
+
+	return 0;
+exit:
+	return err;
+}
+
+static struct stv6110x_config skystar2_stv6110x_config = {
+	.addr			= 0x60,
+	.refclk			= 16000000,
+	.clk_div		= 2,
+};
+
+static int skystar2_express_hd_frontend_attach(struct saa716x_adapter *adapter,
+					       int count)
+{
+	struct saa716x_dev *saa716x = adapter->saa716x;
+	struct saa716x_i2c *i2c = &saa716x->i2c[SAA716x_I2C_BUS_A];
+	struct stv6110x_devctl *ctl;
+
+	if (count < saa716x->config->adapters) {
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) SAA716x frontend Init",
+			count);
+		dprintk(SAA716x_DEBUG, 1, "Adapter (%d) Device ID=%02x", count,
+			saa716x->pdev->subsystem_device);
+
+		saa716x_gpio_set_output(saa716x, 26);
+		msleep(1);
+
+		/* Reset the demodulator */
+		saa716x_gpio_write(saa716x, 26, 1);
+		msleep(10);
+		saa716x_gpio_write(saa716x, 26, 0);
+		msleep(50);
+		saa716x_gpio_write(saa716x, 26, 1);
+		msleep(100);
+
+		adapter->fe = dvb_attach(stv090x_attach,
+					 &skystar2_stv090x_config,
+					 &i2c->i2c_adapter,
+					 STV090x_DEMODULATOR_0);
+
+		if (adapter->fe) {
+			dprintk(SAA716x_NOTICE, 1, "found STV0903 @0x%02x",
+				skystar2_stv090x_config.address);
+		} else {
+			goto exit;
+		}
+
+		adapter->fe->ops.set_voltage = skystar2_set_voltage;
+		adapter->fe->ops.enable_high_lnb_voltage = skystar2_voltage_boost;
+
+		ctl = dvb_attach(stv6110x_attach,
+				 adapter->fe,
+				 &skystar2_stv6110x_config,
+				 &i2c->i2c_adapter);
+
+		if (ctl) {
+			dprintk(SAA716x_NOTICE, 1, "found STV6110(A) @0x%02x",
+				skystar2_stv6110x_config.addr);
+
+			skystar2_stv090x_config.tuner_init	    = ctl->tuner_init;
+			skystar2_stv090x_config.tuner_sleep	    = ctl->tuner_sleep;
+			skystar2_stv090x_config.tuner_set_mode	    = ctl->tuner_set_mode;
+			skystar2_stv090x_config.tuner_set_frequency = ctl->tuner_set_frequency;
+			skystar2_stv090x_config.tuner_get_frequency = ctl->tuner_get_frequency;
+			skystar2_stv090x_config.tuner_set_bandwidth = ctl->tuner_set_bandwidth;
+			skystar2_stv090x_config.tuner_get_bandwidth = ctl->tuner_get_bandwidth;
+			skystar2_stv090x_config.tuner_set_bbgain    = ctl->tuner_set_bbgain;
+			skystar2_stv090x_config.tuner_get_bbgain    = ctl->tuner_get_bbgain;
+			skystar2_stv090x_config.tuner_set_refclk    = ctl->tuner_set_refclk;
+			skystar2_stv090x_config.tuner_get_status    = ctl->tuner_get_status;
+
+			/* call the init function once to initialize
+			   tuner's clock output divider and demod's
+			   master clock */
+			if (adapter->fe->ops.init)
+				adapter->fe->ops.init(adapter->fe);
+		} else {
+			goto exit;
+		}
+
+		dprintk(SAA716x_ERROR, 1, "Done!");
+		return 0;
+	}
+exit:
+	dprintk(SAA716x_ERROR, 1, "Frontend attach failed");
+	return -ENODEV;
+}
+
+static struct saa716x_config skystar2_express_hd_config = {
+	.model_name		= SAA716x_MODEL_SKYSTAR2_EXPRESS_HD,
+	.dev_type		= SAA716x_DEV_SKYSTAR2_EXPRESS_HD,
+	.boot_mode		= SAA716x_EXT_BOOT,
+	.load_config		= &load_config_skystar2,
+	.adapters		= 1,
+	.frontend_attach	= skystar2_express_hd_frontend_attach,
+	.irq_handler		= saa716x_skystar2_pci_irq,
+	.i2c_rate[0]		= SAA716x_I2C_RATE_100,
+	.i2c_rate[1]            = SAA716x_I2C_RATE_100,
+	.adap_config		= {
+		{
+			/* Adapter 0 */
+			.ts_port = 1, /* using FGPI 1 */
+		}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TECHNISAT_USB2
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6925 "TurboSight TBS 6925"
@@ -1856,7 +2119,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6984 "TurboSight TBS 6984"
@@ -1961,8 +2226,10 @@
 		{
 			/* adapter 3 */
 			.ts_port = 1
-		}
-	}
+		},
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6992 "TurboSight TBS 6992"
@@ -2068,7 +2335,9 @@
 			/* adapter 1 */
 			.ts_port = 1
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6922 "TurboSight TBS 6922"
@@ -2136,7 +2405,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 
@@ -2230,7 +2501,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6928SE "TurboSight TBS 6928SE"
@@ -2323,7 +2596,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6284 "TurboSight TBS 6284"
@@ -2451,7 +2726,9 @@
 			/* adapter 3 */
 			.ts_port = 0
 		}
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6982 "TurboSight TBS 6982"
@@ -2531,7 +2808,9 @@
 			/* adapter 1 */
 			.ts_port = 1
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6991 "TurboSight TBS 6991"
@@ -2629,7 +2908,9 @@
 			/* adapter 1 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6618 "TurboSight TBS 6618"
@@ -2708,7 +2989,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6680 "TurboSight TBS 6680"
@@ -2791,7 +3074,9 @@
 			/* adapter 1 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6985 "TurboSight TBS 6985"
@@ -2895,7 +3180,9 @@
 			/* adapter 3 */
 			.ts_port = 1
 		}
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6926 "TurboSight TBS 6926"
@@ -3004,7 +3291,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6923 "TurboSight TBS 6923"
@@ -3072,7 +3361,9 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 #define SAA716x_MODEL_TURBOSIGHT_TBS6925VE "TurboSight TBS 6925VE"
@@ -3176,13 +3467,16 @@
 			/* adapter 0 */
 			.ts_port = 3
 		},
-	}
+	},
+	.rc_gpio_in = 4,
+	.rc_map_name = RC_MAP_TBS_NEC
 };
 
 static struct pci_device_id saa716x_tbs_pci_table[] = {
 
 	MAKE_ENTRY(TURBOSIGHT_TBS6220_SUBVENDOR, TURBOSIGHT_TBS6220_SUBDEVICE, SAA7160, &saa716x_tbs6220_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6280_SUBVENDOR, TURBOSIGHT_TBS6280_SUBDEVICE, SAA7160, &saa716x_tbs6280_config),
+	MAKE_ENTRY(TECHNISAT, SKYSTAR2_EXPRESS_HD, SAA7160, &skystar2_express_hd_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6925_SUBVENDOR, TURBOSIGHT_TBS6925_SUBDEVICE, SAA7160, &saa716x_tbs6925_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6984_SUBVENDOR, TURBOSIGHT_TBS6984_SUBDEVICE, SAA7160, &saa716x_tbs6984_config),
 	MAKE_ENTRY(TURBOSIGHT_TBS6992_SUBVENDOR, TURBOSIGHT_TBS6992_SUBDEVICE, SAA7160, &saa716x_tbs6992_config),
diff -ru a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.h b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.h
--- a/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.h	2013-01-27 23:20:09.000000000 +0200
+++ b/linux-tbs-drivers/linux/drivers/media/common/saa716x/saa716x_tbs.h	2013-04-24 19:55:29.653475387 +0300
@@ -7,6 +7,9 @@
 #define TURBOSIGHT_TBS6280_SUBVENDOR 0x6280
 #define TURBOSIGHT_TBS6280_SUBDEVICE 0x0011
 
+#define TECHNISAT		0x1AE4
+#define SKYSTAR2_EXPRESS_HD	0x0700
+
 #define TURBOSIGHT_TBS6925_SUBVENDOR 0x6925
 #define TURBOSIGHT_TBS6925_SUBDEVICE 0x0001
 
