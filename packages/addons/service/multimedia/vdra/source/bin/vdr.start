#!/bin/sh

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2014 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. /etc/profile

oe_setup_addon service.multimedia.vdra

CONF_FILE="$ADDON_HOME/vdr-front.conf"

vdr_init() {

    ADDON_CONFIG_DIR="$ADDON_HOME/config"
    ADDON_PLUGIN_DIR="$ADDON_DIR/plugin"

    chmod a+x $ADDON_DIR/bin/*
    chmod a+x $ADDON_DIR/sleep.d/*

    ADDON_CACHE_DIR="$ADDON_HOME/cache"
    mkdir -p $ADDON_CACHE_DIR

    cd $ADDON_DIR/config
    mkdir -p $ADDON_CONFIG_DIR
    mkdir -p "$VDR_VIDEO_DIR"

    for dir in `find . -type d`; do
	mkdir -p $ADDON_CONFIG_DIR/$dir
    done

    for config in `find . -type f`; do
	if [ ! -f $ADDON_CONFIG_DIR/$config ]; then
	    cp $config $ADDON_CONFIG_DIR/$config
	fi
    done

    VDR_ARG="-g /tmp --no-kbd"

}

fix_config() {

    if [ -f "$ADDON_CONFIG_DIR/setup.conf" ]; then
	sed -i -e '/^$/d' $ADDON_CONFIG_DIR/setup.conf
	sed -i -e '/^AlwaysSortFoldersFirst.*$/d' $ADDON_CONFIG_DIR/setup.conf
	sed -i -e '/^SetSystemTime.*$/d' $ADDON_CONFIG_DIR/setup.conf
	sed -i -e '/^epgsearch.SVDRPPort.*$/d' $ADDON_CONFIG_DIR/setup.conf
	sed -i -e '/^Font.*$/d' $ADDON_CONFIG_DIR/setup.conf
    fi
    cat >>$ADDON_CONFIG_DIR/setup.conf << MYDATA
    AlwaysSortFoldersFirst = 1
    SetSystemTime = 0
    epgsearch.SVDRPPort = 6419
    MYDATA
}

init_vdr_plugins() {

    if [ "$VDR_DEBUG" == "true" ]; then
	VDR_ARG="$VDR_ARG --log=3"
    else
	VDR_ARG="$VDR_ARG --log=1"
    fi

    SVDRP_PORT=0

    # epgsearch needs svdrp
    if [ "$ENABLE_EPGSEARCH" == "true" ] ; then
	SVDRP_PORT=6419
    fi
    VDR_ARG="$VDR_ARG --port=$SVDRP_PORT"

    VDR_ARG="$VDR_ARG --config=$ADDON_CONFIG_DIR"
    VDR_ARG="$VDR_ARG --resdir=$ADDON_CONFIG_DIR"
    VDR_ARG="$VDR_ARG --cachedir=$ADDON_CACHE_DIR"
    VDR_ARG="$VDR_ARG --lib=$ADDON_PLUGIN_DIR"
    VDR_ARG="$VDR_ARG --video=\"$VDR_VIDEO_DIR\""

    if [ "$VDR_ENABLE_EXTERNAL_RECCMD" == "true" ] ; then
	if [ ! -z "$VDR_EXTERNAL_RECCMD_PATH" -a -x "$VDR_EXTERNAL_RECCMD_PATH" ] ; then
	    VDR_ARG="$VDR_ARG -r \"$VDR_EXTERNAL_RECCMD_PATH\""
	fi
    fi

    if [ "$VDR_ENABLE_CHARSET_OVERRIDE" == "true" ] ; then
	if [ ! -z "$VDR_CHARSET_OVERRIDE_STR" ] ; then
	    VDR_CHARSET_OVERRIDE="$VDR_CHARSET_OVERRIDE_STR"
	fi
    fi

    # keep softcam first
    if [ "$VDR_ENABLE_SOFTCAM" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P 'dvbapi $VDR_DVBAPI_OPT'"
    fi

    if [ "$VDR_ENABLE_WIRBELSCAN" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P wirbelscan -P wirbelscancontrol"
    fi

    if [ "$VDR_ENABLE_IPTV" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P 'iptv -d $VDR_IPTV_NUM_DEVICES'"
    fi

    if [ "$VDR_ENABLE_UPNP" == "true" ] ; then
	VDR_UPNP_DB_DIR="$ADDON_CONFIG_DIR/plugins/upnp"
	mkdir -p $VDR_UPNP_DB_DIR
	VDR_ARG="$VDR_ARG -P 'upnp -d $VDR_UPNP_DB_DIR'"
    fi

    if [ "$VDR_ENABLE_STREAMDEV_SERVER" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P streamdev-server"
    fi

    if [ "$VDR_ENABLE_STREAMDEV_CLIENT" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P streamdev-client"
    fi

    if [ "$VDR_ENABLE_LIVE" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P 'live -i $VDR_LIVE_IP -p $VDR_LIVE_PORT'"
    fi

    if [ "$VDR_ENABLE_CONTROL" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P 'control -p $VDR_CONTROL_PORT'"
    fi

    if [ "$VDR_ENABLE_EEPG" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P eepg"
    fi

    if [ "$VDR_ENABLE_EPGFIXER" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P epgfixer"
    fi

    if [ "$VDR_ENABLE_EPGSEARCH" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P epgsearch -P epgsearchonly -P quickepgsearch -P conflictcheckonly"
    fi

    if [ "$VDR_ENABLE_DUMMYDEVICE" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P dummydevice"
    fi

    if [ "$VDR_ENABLE_SATIP" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P satip"
    fi

    if [ "$VDR_ENABLE_XMLTV2VDR" == "true" ] ; then
	VDR_ARG="$VDR_ARG -P 'xmltv2vdr --epgfile=$ADDON_CACHE_DIR/epg.db'"
	# xmltv2vdr needs /var/run/vdr
	grep -q " /var/run/vdr " /proc/mounts || ( mkdir -p /var/run/vdr && mount -t tmpfs -o size=10% tmpfs /var/run/vdr )
	#handle epgsources
	mkdir -p /var/lib/epgsources
	mkdir -p $ADDON_HOME/config/epgsources
	for source in `find $ADDON_DIR/config/epgsources -type f`; do
	    if [ ! -e $ADDON_HOME/config/epgsources/`basename $source` ] ; then
    		cp $source $ADDON_HOME/config/epgsources/
	    fi
	done
	for source in `find $ADDON_HOME/config/epgsources -type f`; do
	    cp $source /var/lib/epgsources
	done
    fi

    if [ "$VDR_ENABLE_RESTFULAPI" == "true" ] ; then
	VDR_RESTFULAPI_ARGS="--ip $VDR_RESTFULAPI_IP --port $VDR_RESTFULAPI_PORT"
	VDR_RESTFULAPI_EPGIMAGES="$ADDON_CONFIG_DIR/plugins/restfulapi/epgimages"
	mkdir -p $VDR_RESTFULAPI_EPGIMAGES
	VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --epgimages=\"$VDR_RESTFULAPI_EPGIMAGES\""
	VDR_RESTFULAPI_CHANNELLOGOS="$ADDON_CONFIG_DIR/plugins/restfulapi/channellogos"
	mkdir -p $VDR_RESTFULAPI_CHANNELLOGOS
	VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --channellogos=\"$VDR_RESTFULAPI_CHANNELLOGOS\""
	VDR_RESTFULAPI_WEBAPP="$ADDON_CONFIG_DIR/plugins/restfulapi/webapp"
	mkdir -p $VDR_RESTFULAPI_WEBAPP
	VDR_RESTFULAPI_ARGS="$VDR_RESTFULAPI_ARGS --webapp=\"$VDR_RESTFULAPI_WEBAPP\""
	VDR_ARG="$VDR_ARG -P 'restfulapi $VDR_RESTFULAPI_ARGS'"
    fi

    # vnsi/xvdr last
    VDR_ARG="$VDR_ARG -P $VDR_PVR_PLUGIN"

}

ENBL_FILE="$ADDON_HOME/vdr.enable"

if [ -f "$ENBL_FILE" ]; then

    echo  "Starting vdr service ..."

    vdr_init

    init_vdr_plugins

    # start userspace DVB driver/addon
    for driver_dvb in $(find /storage/.kodi/addons/driver.dvb.*/bin/userspace-driver.sh -type f 2>/dev/null); do
    driver_dvb_name=$(echo $driver_dvb | awk 'BEGIN {FS="/"} {printf("%s", $5)}')
    logger -t VDR "### Loading userspace DVB driver: $driver_dvb_name ###"
    # use ". " because of variable export
    . $driver_dvb
    done

    # (wait for) at least 1 adapter (xbmc allows to set 0)
    [ "$DVB_NUM_ADAPTERS" == "" ] && DVB_NUM_ADAPTERS=1
    [ $DVB_NUM_ADAPTERS -lt 1 ] && DVB_NUM_ADAPTERS=1

    if [ "$DVB_WAIT_FOR_FEINIT" == "true" ] ; then
	while [ true ] ; do
	    if [ -e /dev/dvb/adapter$((DVB_NUM_ADAPTERS-1))/frontend0 ] ; then
    		break
	    fi
	    sleep 1
	done
    fi

    fix_config

    export LD_LIBRARY_PATH=$ADDON_DIR/lib

    eval LANG=en_US.UTF-8 VDR_CHARSET_OVERRIDE="$VDR_CHARSET_OVERRIDE" exec vdr.bin $VDR_ARG &>$ADDON_LOG_FILE
fi