diff -Naur a/source/mupen64plus-audio-sdl/projects/unix/Makefile b/source/mupen64plus-audio-sdl/projects/unix/Makefile
--- a/source/mupen64plus-audio-sdl/projects/unix/Makefile	2013-07-04 03:28:02.000000000 +0300
+++ b/source/mupen64plus-audio-sdl/projects/unix/Makefile	2013-09-17 22:44:25.353369000 +0300
@@ -22,96 +22,118 @@
 # Makefile for SDL Audio plugin in Mupen64plus
 
 # detect operation system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-  SHARED = -shared
-  SO_EXTENSION = so
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-  SHARED = -shared
-  SO_EXTENSION = so
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-  SHARED = -shared
-  SO_EXTENSION = so
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-  SHARED = -bundle
-  SO_EXTENSION = dylib
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-  SHARED = -shared
-  SO_EXTENSION = so
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  SHARED = -shared
-  SO_EXTENSION = so
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-  SHARED = -shared
-  SO_EXTENSION = so
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  SHARED = -shared
-  SO_EXTENSION = dll
-  PIC = 0
-  NO_OSS = 1
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+  # SHARED = -shared
+  # SO_EXTENSION = so
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+  # SHARED = -shared
+  # SO_EXTENSION = so
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+  # SHARED = -shared
+  # SO_EXTENSION = so
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+  # SHARED = -bundle
+  # SO_EXTENSION = dylib
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+  # SHARED = -shared
+  # SO_EXTENSION = so
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # SHARED = -shared
+  # SO_EXTENSION = so
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+  # SHARED = -shared
+  # SO_EXTENSION = so
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # SHARED = -shared
+  # SO_EXTENSION = dll
+  # PIC = 0
+  # NO_OSS = 1
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
+
 HOST_CPU ?= $(shell uname -m)
 NO_ASM ?= 1
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
+
+ifeq ("$(ARCH)","i386")
+	CPU := X86
+	ARCH_DETECTED := 32BITS
 endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+
+ifeq ("$(ARCH)","x86_64")
+    CPU := X86
+    ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+ 
+# HOST_CPU ?= $(shell uname -m)
+# NO_ASM ?= 1
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-core/projects/unix/Makefile b/source/mupen64plus-core/projects/unix/Makefile
--- a/source/mupen64plus-core/projects/unix/Makefile	2013-07-04 03:27:56.000000000 +0300
+++ b/source/mupen64plus-core/projects/unix/Makefile	2013-09-17 22:59:26.385905200 +0300
@@ -22,83 +22,102 @@
 # Makefile for Mupen64Plus Core
 
 # detect operating system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  CFLAGS += -DIOAPI_NO_64
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  PIC = 0
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # CFLAGS += -DIOAPI_NO_64
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # PIC = 0
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    NEW_DYNAREC := 1
-    CFLAGS += -mfpu=vfp -mfloat-abi=softfp
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
+endif
+ 
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+
+# HOST_CPU ?= $(shell uname -m)
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # NEW_DYNAREC := 1
+    # CFLAGS += -mfpu=vfp -mfloat-abi=softfp
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-input-sdl/projects/unix/Makefile b/source/mupen64plus-input-sdl/projects/unix/Makefile
--- a/source/mupen64plus-input-sdl/projects/unix/Makefile	2013-07-04 03:28:05.000000000 +0300
+++ b/source/mupen64plus-input-sdl/projects/unix/Makefile	2013-09-17 22:59:21.377618700 +0300
@@ -21,95 +21,114 @@
 # Makefile for SDL Input plugin in Mupen64plus
 
 # detect operating system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-  SO_EXTENSION = dylib
-  SHARED = -bundle
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  SO_EXTENSION = dll
-  SHARED = -shared
-  PIC = 0
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+  # SO_EXTENSION = dylib
+  # SHARED = -bundle
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # SO_EXTENSION = dll
+  # SHARED = -shared
+  # PIC = 0
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
-NO_ASM ?= 1
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
 endif
+
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
+endif
+NO_ASM ?= 1 
+ 
+# HOST_CPU ?= $(shell uname -m)
+# NO_ASM ?= 1
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-rsp-hle/projects/unix/Makefile b/source/mupen64plus-rsp-hle/projects/unix/Makefile
--- a/source/mupen64plus-rsp-hle/projects/unix/Makefile	2013-07-04 03:28:07.000000000 +0300
+++ b/source/mupen64plus-rsp-hle/projects/unix/Makefile	2013-09-17 22:59:17.497396800 +0300
@@ -22,95 +22,114 @@
 # Makefile for Mupen64 HLE RSP plugin in Mupen64plus.
 
 # detect operating system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-  SO_EXTENSION = dylib
-  SHARED = -bundle
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  SO_EXTENSION = dll
-  SHARED = -shared
-  PIC = 0
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+  # SO_EXTENSION = dylib
+  # SHARED = -bundle
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # SO_EXTENSION = dll
+  # SHARED = -shared
+  # PIC = 0
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
-NO_ASM ?= 1
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
 endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+
+# HOST_CPU ?= $(shell uname -m)
+# NO_ASM ?= 1
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-ui-console/projects/unix/Makefile b/source/mupen64plus-ui-console/projects/unix/Makefile
--- a/source/mupen64plus-ui-console/projects/unix/Makefile	2013-07-04 03:28:00.000000000 +0300
+++ b/source/mupen64plus-ui-console/projects/unix/Makefile	2013-09-17 23:01:16.306192200 +0300
@@ -21,72 +21,91 @@
 # Makefile for Mupen64plus-ui-console
 
 # detect operation system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
-NO_ASM ?= 1
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-  else
-    ARCH_DETECTED := 64BITS
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
 endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+
+# HOST_CPU ?= $(shell uname -m)
+# NO_ASM ?= 1
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+  # else
+    # ARCH_DETECTED := 64BITS
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-video-glide64mk2/projects/unix/Makefile b/source/mupen64plus-video-glide64mk2/projects/unix/Makefile
--- a/source/mupen64plus-video-glide64mk2/projects/unix/Makefile	2013-07-04 03:28:17.000000000 +0300
+++ b/source/mupen64plus-video-glide64mk2/projects/unix/Makefile	2013-09-17 23:04:50.489442800 +0300
@@ -23,100 +23,119 @@
 # Makefile for Glide64mk2 plugin in Mupen64Plus
 
 # detect operating system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-  SO_EXTENSION = dylib
-  SHARED = -bundle
-  BOOST_SUFFIX = -mt
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  SO_EXTENSION = dll
-  SHARED = -shared
-  PIC = 0
-  BOOST_SUFFIX = -mt
-  CPPFLAGS += -DNO_FILTER_THREAD
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+  # SO_EXTENSION = dylib
+  # SHARED = -bundle
+  # BOOST_SUFFIX = -mt
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # SO_EXTENSION = dll
+  # SHARED = -shared
+  # PIC = 0
+  # BOOST_SUFFIX = -mt
+  # CPPFLAGS += -DNO_FILTER_THREAD
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
 endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    NO_ASM := 1
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+
+# HOST_CPU ?= $(shell uname -m)
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # NO_ASM := 1
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
diff -Naur a/source/mupen64plus-video-rice/projects/unix/Makefile b/source/mupen64plus-video-rice/projects/unix/Makefile
--- a/source/mupen64plus-video-rice/projects/unix/Makefile	2013-07-04 03:28:10.000000000 +0300
+++ b/source/mupen64plus-video-rice/projects/unix/Makefile	2013-09-17 23:02:44.738250300 +0300
@@ -22,98 +22,117 @@
 # Makefile for RiceVideo plugin in Mupen64Plus
 
 # detect operating system
-UNAME ?= $(shell uname -s)
-OS := NONE
-ifeq ("$(UNAME)","Linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","linux")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifneq ("$(filter GNU hurd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","Darwin")
-  OS = OSX
-  SO_EXTENSION = dylib
-  SHARED = -bundle
-  PIC = 1  # force PIC under OSX
-endif
-ifeq ("$(UNAME)","FreeBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(UNAME)","OpenBSD")
-  OS = FREEBSD
-  SO_EXTENSION = so
-  SHARED = -shared
-  $(warning OS type "$(UNAME)" not officially supported.')
-endif
-ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
-  OS = LINUX
-  SO_EXTENSION = so
-  SHARED = -shared
-endif
-ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
-  OS = MINGW
-  SO_EXTENSION = dll
-  SHARED = -shared
-  PIC = 0
-endif
-ifeq ("$(OS)","NONE")
-  $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
-endif
+
+OS := LINUX
+SHARED = -shared
+SO_EXTENSION = so
+
+# UNAME ?= $(shell uname -s)
+# OS := NONE
+# ifeq ("$(UNAME)","Linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","linux")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifneq ("$(filter GNU hurd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","Darwin")
+  # OS = OSX
+  # SO_EXTENSION = dylib
+  # SHARED = -bundle
+  # PIC = 1  # force PIC under OSX
+# endif
+# ifeq ("$(UNAME)","FreeBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(UNAME)","OpenBSD")
+  # OS = FREEBSD
+  # SO_EXTENSION = so
+  # SHARED = -shared
+  # $(warning OS type "$(UNAME)" not officially supported.')
+# endif
+# ifneq ("$(filter GNU/kFreeBSD kfreebsd,$(UNAME))","")
+  # OS = LINUX
+  # SO_EXTENSION = so
+  # SHARED = -shared
+# endif
+# ifeq ("$(patsubst MINGW%,MINGW,$(UNAME))","MINGW")
+  # OS = MINGW
+  # SO_EXTENSION = dll
+  # SHARED = -shared
+  # PIC = 0
+# endif
+# ifeq ("$(OS)","NONE")
+  # $(error OS type "$(UNAME)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
+# endif
 
 # detect system architecture
-HOST_CPU ?= $(shell uname -m)
+
 CPU := NONE
-ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
-  CPU := X86
-  ifeq ("$(BITS)", "32")
-    ARCH_DETECTED := 64BITS_32
-    PIC ?= 0
-  else
-    ARCH_DETECTED := 64BITS
-    PIC ?= 1
-  endif
-endif
-ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
-  CPU := X86
-  ARCH_DETECTED := 32BITS
-  PIC ?= 0
-endif
-ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 32BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
+ifeq ("$(ARCH)","i386")
+        CPU := X86
+        ARCH_DETECTED := 32BITS
 endif
-ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
-  CPU := PPC
-  ARCH_DETECTED := 64BITS
-  BIG_ENDIAN := 1
-  PIC ?= 1
-  NO_ASM := 1
-  $(warning Architecture "$(HOST_CPU)" not officially supported.')
-endif
-ifneq ("$(filter arm%,$(HOST_CPU))","")
-  ifeq ("$(filter arm%b,$(HOST_CPU))","")
-    CPU := ARM
-    ARCH_DETECTED := 32BITS
-    PIC ?= 1
-    NO_ASM := 1
-    $(warning Architecture "$(HOST_CPU)" not officially supported.')
-  endif
+
+ifeq ("$(ARCH)","x86_64")
+        CPU := X86
+        ARCH_DETECTED := 64BITS
 endif
+NO_ASM ?= 1
+
+# HOST_CPU ?= $(shell uname -m)
+# CPU := NONE
+# ifneq ("$(filter x86_64 amd64,$(HOST_CPU))","")
+  # CPU := X86
+  # ifeq ("$(BITS)", "32")
+    # ARCH_DETECTED := 64BITS_32
+    # PIC ?= 0
+  # else
+    # ARCH_DETECTED := 64BITS
+    # PIC ?= 1
+  # endif
+# endif
+# ifneq ("$(filter pentium i%86,$(HOST_CPU))","")
+  # CPU := X86
+  # ARCH_DETECTED := 32BITS
+  # PIC ?= 0
+# endif
+# ifneq ("$(filter ppc macppc socppc powerpc,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 32BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter ppc64 powerpc64,$(HOST_CPU))","")
+  # CPU := PPC
+  # ARCH_DETECTED := 64BITS
+  # BIG_ENDIAN := 1
+  # PIC ?= 1
+  # NO_ASM := 1
+  # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+# endif
+# ifneq ("$(filter arm%,$(HOST_CPU))","")
+  # ifeq ("$(filter arm%b,$(HOST_CPU))","")
+    # CPU := ARM
+    # ARCH_DETECTED := 32BITS
+    # PIC ?= 1
+    # NO_ASM := 1
+    # $(warning Architecture "$(HOST_CPU)" not officially supported.')
+  # endif
+# endif
+
 ifeq ("$(CPU)","NONE")
   $(error CPU type "$(HOST_CPU)" not supported.  Please file bug report at 'http://code.google.com/p/mupen64plus/issues')
 endif
